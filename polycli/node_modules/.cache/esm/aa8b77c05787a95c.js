let fs,shell,tunnelpaper,req,utils;_578‍.x([["handle_uniprot",()=>handle_uniprot]]);_578‍.w("fs",[["default",["fs"],function(v){fs=v}]]);_578‍.w("shelljs",[["default",["shell"],function(v){shell=v}]]);_578‍.w("./../assets/kdd-paper-table",[["*",null,function(v){tunnelpaper=v}]]);_578‍.w("./requests",[["*",null,function(v){req=v}]]);_578‍.w("./utils",[["*",null,function(v){utils=v}]]);





// should take TARGETS parameter
       const handle_uniprot = async () => {
    var depositionDirectory = './static/uniprot/'                          //WRT PROJECT ROOT
    var targetmolecules = Object.keys(tunnelpaper.structs_kdd2019)
    _578‍.g.console.log("Attempting to download: ", targetmolecules, " to ", depositionDirectory);

    const promiseIndexed = targetmolecules.map(async mol =>
        await req.requestUniprotProfilePromise(mol)
            .then(
                res => { return [mol, utils.restructureOnDowload(res.data)] },
                err => { return [mol, { failedWith: err }] })
    )
    const resolved_data = await Promise.all(promiseIndexed);
    if (!fs.existsSync(depositionDirectory)) {
        _578‍.g.console.log("Creating directory: ", depositionDirectory);
        shell.mkdir('-p', depositionDirectory);
    }
    resolved_data.forEach(datum => {
        fs.writeFileSync(depositionDirectory + `${datum[0]}.json`, JSON.stringify(datum[1], null, 4), 'utf8',
            () => { console.log(`${datum[0]} saved to disk.\n`) })
    }
    )
}

